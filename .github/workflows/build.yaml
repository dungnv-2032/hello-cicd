name: cd-rollback
on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
    types:
      - closed
jobs:
  build_and_tag_image:
    runs-on: ubuntu-latest
    name: build_and_tag_image
    outputs:
      repo_digests: ${{ steps.set-variable.outputs.repo_digests }}
    steps:
      - name: Login Docker Hub
        id: login_docker_hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: pull docker and build SHA version
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/hello-cicd:latest
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/hello-cicd:latest ${{ secrets.DOCKERHUB_USERNAME }}/hello-cicd:${{github.sha}}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/hello-cicd:${{github.sha}}
      - name: set variable output
        id: set-variable
        shell: bash
        run: |
          repo_digests=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKERHUB_USERNAME }}/hello-cicd:latest)
          echo "repo_digests=${repo_digests: -64}" >> "$GITHUB_OUTPUT"
  send_notify_approve:
    name: send_notify_approve
    runs-on: ubuntu-latest
    needs: build_and_tag_image
    if: success()
    steps:
      # Notify Slack with an interactive message
      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "Có một bản release cần được approve.\nENV: staging\nRepository: ${{ github.repository }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  push_image:
    environment: staging
    name: push_image
    runs-on: ubuntu-latest
    needs: send_notify_approve
    if: success()
    steps:
      - name: Login Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - uses: actions/checkout@v2
      - name: Build and Push Docker Image
        run: |
          docker build -t dungc/hello-cicd:latest .
          docker push dungc/hello-cicd:latest
      - name: Build and Push Docker Image
        run: |
          docker push dungc/hello-cicd:abcdefgh
#      - name: Checkout
#        uses: actions/checkout@v4
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#      - name: Build
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          load: true
#          tags: ${{ secrets.DOCKERHUB_USERNAME }}/hello-cicd:abcdefg

  send_notify_success:
    name: send_notify_success
    runs-on: ubuntu-latest
    needs: push_image
    if: success()
    steps:
      - name: Report Status success
        id: slack_success
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "Deloy finished !"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  send_notify_failure:
    name: send_notify_failure
    runs-on: ubuntu-latest
    if: failure()
    needs: push_image
    steps:
      - name: Report Status fail
        id: slack_fail
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "Deloy Fail !"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
  check_need_rollback:
    name: check_need_rollback
    runs-on: ubuntu-latest
    outputs:
      repo_digests: ${{ steps.set-variable-latest.outputs.repo_digests }}
    needs: [ send_notify_failure, build_and_tag_image ]
    if: failure()
    steps:
      - name: Pull current version
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/hello-cicd:latest
      - name: Check repo_digests current
        id: set-variable-latest
        run: |
          repo_digests=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKERHUB_USERNAME }}/hello-cicd:latest)
          echo "repo_digests=${repo_digests: -64}" >> "$GITHUB_OUTPUT"
      - name: get variable
        run: |
          echo ${{needs.build_and_tag_image.outputs.repo_digests}}
          echo ${{steps.set-variable-latest.outputs.repo_digests}}
          echo ${{needs.build_and_tag_image.outputs.repo_digests != steps.set-variable-latest.outputs.repo_digests}}
  rollback:
    name: rollback
    runs-on: ubuntu-latest
    needs: [build_and_tag_image, check_need_rollback]
#    if: failure() && ${{needs.build_and_tag_image.outputs.repo_digests != needs.check_need_rollback.outputs.repo_digests}}
    steps:
      - name: Check variable
        run: |
          echo ${{needs.build_and_tag_image.outputs.repo_digests}}
          echo ${{needs.check_need_rollback.outputs.repo_digests}}
          echo ${{needs.build_and_tag_image.outputs.repo_digests != needs.check_need_rollback.outputs.repo_digests}}
#      - name: Login Docker Hub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
#
#      - name: Push Docker Image
#        id: docker_pre_build
#        run: |
#          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/hello-cicd:${{github.sha}}
#          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/hello-cicd:${{github.sha}} ${{ secrets.DOCKERHUB_USERNAME }}/hello-cicd:latest
#          docker push ${{ secrets.DOCKERHUB_USERNAME }}/hello-cicd:latest
